#!/usr/bin/ruby
=begin
Copyright Jacob Killelea <jkillelea@protonmail.ch>
MIT license
=end

require_relative "lib/dotfile.rb"

Config = { # hold config values (keys are same as those in Options hash)
  :verbose => false
}
Options = { # available options, and their key (keys are same as those in Config hash)
  :verbose => ['-v', '--verbose']
}

def if_verbose(string)
  if Config[:verbose]
    puts string
  end
  return nil
end

def do_the_link(dotfile)
  if File.symlink? dotfile.dotfile_path # if already symlink, remove
    File.delete dotfile.dotfile_path
    # continue as normal
  end

  if_verbose "linking #{dotfile.absolute_path} to #{dotfile.dotfile_path}" # the actual linking bit
  File.symlink dotfile.absolute_path, dotfile.dotfile_path
end

def do_the_backup(dotfile)
  unless File.symlink? dotfile.dotfile_path # check that the file we're backing up isn't just a symlink.
    backup_root     = "./backup"            # if it is a symlink, just leave it alone. We'll delete it in the next function call
    backup_dir      = "backup-#{Time.now.to_s.split(" ")[0]}" # TODO:: Something less haky!
    daily_backup_folder = "#{backup_root}/#{backup_dir}"
    fullbackup_path = "#{daily_backup_folder}/#{dotfile.undot}"

    # if the backup root (./backup) doesn't already exist
    unless (File.directory? backup_root)
      Dir.mkdir backup_root
    end
    # if the backup subdirectory doesn't already exist
    unless (File.directory? daily_backup_folder)
      Dir.mkdir daily_backup_folder
    end

    if File.exists? fullbackup_path # if we've already done this at least once today
      raise BackupError, "[ERROR]:: This file has already been backed up today! This programmer is too lasy to come up with a solution to that!"
    else
      # the actual backup bit
      puts "dotfile exists already!"
      puts "moving existing #{dotfile.dot} to #{backup_dir}"
      File.rename dotfile.dotfile_path, fullbackup_path
    end
  end
end

# parse options, if a command line arg is one of the available switches, set relevant Config parameter to true
ARGV.each do |arg|
  Options.each_with_index { |(key, val), index| # val is a string array
    if val.include? arg
      Config[key] = true
    end
  }
end

# Do the thing
ARGV.each do |arg|
  next if arg[0] == '-' # if arg is a configuration option

  dotfile = DotFile.new(arg)
  # look for an existing dotfile in that location
  if File.exists? dotfile.dotfile_path
    do_the_backup(dotfile)
  end
  # link the dotfile to the home directory
  do_the_link(dotfile)
end
