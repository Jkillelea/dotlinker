#!/usr/bin/ruby
=begin
Copyright Jacob Killelea <jkillelea@protonmail.ch>
MIT license
=end

require_relative "./lib/dotfile.rb"

def do_the_link(dotfile)
  if File.symlink? dotfile.dotfile_path #----- if already symlink, remove
    File.delete dotfile.dotfile_path
    # continue as normal
  elsif File.exists? dotfile.dotfile_path #--- if already exists, back up to backup directory
    puts "dotfile exists already!"
    puts "moving file to backup"
    do_the_backup(dotfile.dotfile_path) # back file up
    # continue as normal
  end

  puts "linking #{dotfile.absolute_path} to #{dotfile.dotfile_path}" # the actual linking bit
  File.symlink dotfile.absolute_path, dotfile.dotfile_path
end

def do_the_backup(dotfile)
  backup_root     = "./backup"
  backup_dir      = "backup-#{Time.now.to_s.split(" ")[0]}" # TODO:: Something less haky!
  fullbackup_path = "#{backup_root}/#{backup_dir}/#{dotfile.undot}"

  # if the backup root (./backup) doesn't already exist
  unless ((File.exists? backup_root) && (File.directory? backup_root))
    Dir.mkdir "#{backup_root}"
  end
  # if the backup subdirectory doesn't already exist
  unless ((File.exists? backup_dir) && (File.directory? backup_dir))
    Dir.mkdir "#{backup_root}/#{backup_dir}"
  end

  if File.exists? fullbackup_path # if we've already done this at least once today
    raise "[ERROR]:: This file has already been backed up today! This programmer is too lasy to come up with a solution to that!"
  else
    # the actual backup bit
    puts "moving #{dotfile.dot} to #{backup_dir}"
    File.rename "#{Dir.home}/#{dotfile.dot}", fullbackup_path
  end
end

ARGV.each do |file|
  dotfile = DotFile.new(file)
  # look for an existing dotfile in that location
  if File.exists? dotfile.dotfile_path
    do_the_backup(dotfile)
  end
  # link the dotfile to the home directory
  do_the_link(dotfile)
end
