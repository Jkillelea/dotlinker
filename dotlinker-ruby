#!/usr/bin/env ruby -wKU
require "./lib/dotfile.rb"

def do_the_link(filename)
  homedir      = Dir.home # `command` returns the command's output, plus a newline. Remove it with chomp
  pwdpath      = Dir.pwd
  fullfilepath = "#{pwdpath}/#{filename}"
  basename     = `basename #{fullfilepath}`.chomp
  dotname      = ".#{basename}"
  dotpath      = "#{homedir}/#{dotname}"

  if File.symlink? dotpath #----- if already symlink, remove
    File.delete dotpath

  elsif File.exists? dotpath #--- if already exists, back up to backup directory
    puts "dotfile exists already!"
    puts "moving file to backup"
    do_the_backup(dotpath) # back file up
    # continue as normal
  end

  puts "linking #{fullfilepath} to #{dotpath}" # the actual linking bit
  File.symlink fullfilepath, linkfilepath
end

def do_the_backup(dotpath)
  backup_root     = "./.backup"
  backup_dir      = "backup-#{Time.year}-#{Time.month}-#{Time.day}"
  fullbackup_path = "#{backup_root}/#{backup_dir}/#{dotpath}"

  # if the backup root (./.backup) doesn't already exist
  unless (File.exists? backup_root && File.directory backup_root)
    Dir.mkdir "#{backup_root}"
  end
  # if the backup subdirectory doesn't already exist
  unless (File.exists? backup_dir && File.directory backup_dir)
    Dir.mkdir "#{backup_dir}"
  end

  if File.exists? fullbackup_path # if we've already done this at least once today
    raise "[ERROR]:: This file has already been backed up today! This programmer is too lasy to come up with a solution to that!"
  else
    # the actual backup bit
    puts "moving #{dotpath} to #{backup_dir}"
    File.rename dotpath, fullbackup_path
  end
end

ARGV.each do |file|
  dotfile = DotFile.new(file)
  fullfilepath = dotfile.absolute_path
  basename     = dotfile.basename
  dotname      = dotfile.dot

  if File.exists? "~/#{dotname}"
    do_the_backup file
  end

  do_the_link file
end
